# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2017, 파이썬 소프트웨어 재단
# This file is distributed under the same license as the 파이썬 package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: 파이썬 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-12-12 23:01+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../using/cmdline.rst:9
msgid "Command line and environment"
msgstr ""

#: ../../using/cmdline.rst:11
msgid "The CPython interpreter scans the command line and the environment for various settings."
msgstr ""

#: ../../using/cmdline.rst:16
msgid "Other implementations' command line schemes may differ.  See :ref:`implementations` for further resources."
msgstr ""

#: ../../using/cmdline.rst:23
msgid "Command line"
msgstr ""

#: ../../using/cmdline.rst:25
msgid "When invoking Python, you may specify any of these options::"
msgstr ""

#: ../../using/cmdline.rst:29
msgid "The most common use case is, of course, a simple invocation of a script::"
msgstr ""

#: ../../using/cmdline.rst:37
msgid "Interface options"
msgstr ""

#: ../../using/cmdline.rst:39
msgid "The interpreter interface resembles that of the UNIX shell, but provides some additional methods of invocation:"
msgstr ""

#: ../../using/cmdline.rst:42
msgid "When called with standard input connected to a tty device, it prompts for commands and executes them until an EOF (an end-of-file character, you can produce that with :kbd:`Ctrl-D` on UNIX or :kbd:`Ctrl-Z, Enter` on Windows) is read."
msgstr ""

#: ../../using/cmdline.rst:45
msgid "When called with a file name argument or with a file as standard input, it reads and executes a script from that file."
msgstr ""

#: ../../using/cmdline.rst:47
msgid "When called with a directory name argument, it reads and executes an appropriately named script from that directory."
msgstr ""

#: ../../using/cmdline.rst:49
msgid "When called with ``-c command``, it executes the Python statement(s) given as *command*.  Here *command* may contain multiple statements separated by newlines. Leading whitespace is significant in Python statements!"
msgstr ""

#: ../../using/cmdline.rst:52
msgid "When called with ``-m module-name``, the given module is located on the Python module path and executed as a script."
msgstr ""

#: ../../using/cmdline.rst:55
msgid "In non-interactive mode, the entire input is parsed before it is executed."
msgstr ""

#: ../../using/cmdline.rst:57
msgid "An interface option terminates the list of options consumed by the interpreter, all consecutive arguments will end up in :data:`sys.argv` -- note that the first element, subscript zero (``sys.argv[0]``), is a string reflecting the program's source."
msgstr ""

#: ../../using/cmdline.rst:64
msgid "Execute the Python code in *command*.  *command* can be one or more statements separated by newlines, with significant leading whitespace as in normal module code."
msgstr ""

#: ../../using/cmdline.rst:68
msgid "If this option is given, the first element of :data:`sys.argv` will be ``\"-c\"`` and the current directory will be added to the start of :data:`sys.path` (allowing modules in that directory to be imported as top level modules)."
msgstr ""

#: ../../using/cmdline.rst:76
msgid "Search :data:`sys.path` for the named module and execute its contents as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:79
msgid "Since the argument is a *module* name, you must not give a file extension (``.py``).  The module name should be a valid absolute Python module name, but the implementation may not always enforce this (e.g. it may allow you to use a name that includes a hyphen)."
msgstr ""

#: ../../using/cmdline.rst:84
msgid "Package names (including namespace packages) are also permitted. When a package name is supplied instead of a normal module, the interpreter will execute ``<pkg>.__main__`` as the main module. This behaviour is deliberately similar to the handling of directories and zipfiles that are passed to the interpreter as the script argument."
msgstr ""

#: ../../using/cmdline.rst:93
msgid "This option cannot be used with built-in modules and extension modules written in C, since they do not have Python module files. However, it can still be used for precompiled modules, even if the original source file is not available."
msgstr ""

#: ../../using/cmdline.rst:98
msgid "If this option is given, the first element of :data:`sys.argv` will be the full path to the module file (while the module file is being located, the first element will be set to ``\"-m\"``). As with the :option:`-c` option, the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:103
msgid "Many standard library modules contain code that is invoked on their execution as a script.  An example is the :mod:`timeit` module::"
msgstr ""

#: ../../using/cmdline.rst:111
msgid ":func:`runpy.run_module`"
msgstr ""

#: ../../using/cmdline.rst:111
#: ../../using/cmdline.rst:153
msgid "Equivalent functionality directly available to Python code"
msgstr ""

#: ../../using/cmdline.rst:113
msgid ":pep:`338` -- Executing modules as scripts"
msgstr ""

#: ../../using/cmdline.rst:116
msgid "Supply the package name to run a ``__main__`` submodule."
msgstr ""

#: ../../using/cmdline.rst:119
msgid "namespace packages are also supported"
msgstr ""

#: ../../using/cmdline.rst:125
msgid "Read commands from standard input (:data:`sys.stdin`).  If standard input is a terminal, :option:`-i` is implied."
msgstr ""

#: ../../using/cmdline.rst:128
msgid "If this option is given, the first element of :data:`sys.argv` will be ``\"-\"`` and the current directory will be added to the start of :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:135
msgid "Execute the Python code contained in *script*, which must be a filesystem path (absolute or relative) referring to either a Python file, a directory containing a ``__main__.py`` file, or a zipfile containing a ``__main__.py`` file."
msgstr ""

#: ../../using/cmdline.rst:140
msgid "If this option is given, the first element of :data:`sys.argv` will be the script name as given on the command line."
msgstr ""

#: ../../using/cmdline.rst:143
msgid "If the script name refers directly to a Python file, the directory containing that file is added to the start of :data:`sys.path`, and the file is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:147
msgid "If the script name refers to a directory or zipfile, the script name is added to the start of :data:`sys.path` and the ``__main__.py`` file in that location is executed as the :mod:`__main__` module."
msgstr ""

#: ../../using/cmdline.rst:152
msgid ":func:`runpy.run_path`"
msgstr ""

#: ../../using/cmdline.rst:156
msgid "If no interface option is given, :option:`-i` is implied, ``sys.argv[0]`` is an empty string (``\"\"``) and the current directory will be added to the start of :data:`sys.path`.  Also, tab-completion and history editing is automatically enabled, if available on your platform (see :ref:`rlcompleter-config`)."
msgstr ""

#: ../../using/cmdline.rst:162
msgid ":ref:`tut-invoking`"
msgstr ""

#: ../../using/cmdline.rst:164
msgid "Automatic enabling of tab-completion and history editing."
msgstr ""

#: ../../using/cmdline.rst:169
msgid "Generic options"
msgstr ""

#: ../../using/cmdline.rst:175
msgid "Print a short description of all command line options."
msgstr ""

#: ../../using/cmdline.rst:181
msgid "Print the Python version number and exit.  Example output could be::"
msgstr ""

#: ../../using/cmdline.rst:185
msgid "When given twice, print more information about the build, like::"
msgstr ""

#: ../../using/cmdline.rst:190
msgid "The ``-VV`` option."
msgstr ""

#: ../../using/cmdline.rst:196
msgid "Miscellaneous options"
msgstr ""

#: ../../using/cmdline.rst:200
msgid "Issue a warning when comparing :class:`bytes` or :class:`bytearray` with :class:`str` or :class:`bytes` with :class:`int`.  Issue an error when the option is given twice (:option:`!-bb`)."
msgstr ""

#: ../../using/cmdline.rst:204
msgid "Affects comparisons of :class:`bytes` with :class:`int`."
msgstr ""

#: ../../using/cmdline.rst:209
msgid "If given, Python won't try to write ``.pyc`` files on the import of source modules.  See also :envvar:`PYTHONDONTWRITEBYTECODE`."
msgstr ""

#: ../../using/cmdline.rst:215
msgid "Turn on parser debugging output (for wizards only, depending on compilation options).  See also :envvar:`PYTHONDEBUG`."
msgstr ""

#: ../../using/cmdline.rst:221
msgid "Ignore all :envvar:`PYTHON*` environment variables, e.g. :envvar:`PYTHONPATH` and :envvar:`PYTHONHOME`, that might be set."
msgstr ""

#: ../../using/cmdline.rst:227
msgid "When a script is passed as first argument or the :option:`-c` option is used, enter interactive mode after executing the script or the command, even when :data:`sys.stdin` does not appear to be a terminal.  The :envvar:`PYTHONSTARTUP` file is not read."
msgstr ""

#: ../../using/cmdline.rst:232
msgid "This can be useful to inspect global variables or a stack trace when a script raises an exception.  See also :envvar:`PYTHONINSPECT`."
msgstr ""

#: ../../using/cmdline.rst:238
msgid "Run Python in isolated mode. This also implies -E and -s. In isolated mode :data:`sys.path` contains neither the script's directory nor the user's site-packages directory. All :envvar:`PYTHON*` environment variables are ignored, too. Further restrictions may be imposed to prevent the user from injecting malicious code."
msgstr ""

#: ../../using/cmdline.rst:249
msgid "Turn on basic optimizations.  See also :envvar:`PYTHONOPTIMIZE`."
msgstr ""

#: ../../using/cmdline.rst:254
msgid "Discard docstrings in addition to the :option:`-O` optimizations."
msgstr ""

#: ../../using/cmdline.rst:259
msgid "Don't display the copyright and version messages even in interactive mode."
msgstr ""

#: ../../using/cmdline.rst:266
msgid "Kept for compatibility.  On Python 3.3 and greater, hash randomization is turned on by default."
msgstr ""

#: ../../using/cmdline.rst:269
msgid "On previous versions of Python, this option turns on hash randomization, so that the :meth:`__hash__` values of str, bytes and datetime are \"salted\" with an unpredictable random value.  Although they remain constant within an individual Python process, they are not predictable between repeated invocations of Python."
msgstr ""

#: ../../using/cmdline.rst:275
msgid "Hash randomization is intended to provide protection against a denial-of-service caused by carefully-chosen inputs that exploit the worst case performance of a dict construction, O(n^2) complexity.  See http://www.ocert.org/advisories/ocert-2011-003.html for details."
msgstr ""

#: ../../using/cmdline.rst:280
msgid ":envvar:`PYTHONHASHSEED` allows you to set a fixed value for the hash seed secret."
msgstr ""

#: ../../using/cmdline.rst:288
msgid "Don't add the :data:`user site-packages directory <site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:293
#: ../../using/cmdline.rst:617
#: ../../using/cmdline.rst:629
msgid ":pep:`370` -- Per user site-packages directory"
msgstr ""

#: ../../using/cmdline.rst:298
msgid "Disable the import of the module :mod:`site` and the site-dependent manipulations of :data:`sys.path` that it entails.  Also disable these manipulations if :mod:`site` is explicitly imported later (call :func:`site.main` if you want them to be triggered)."
msgstr ""

#: ../../using/cmdline.rst:306
msgid "Force the stdout and stderr streams to be unbuffered.  This option has no effect on the stdin stream."
msgstr ""

#: ../../using/cmdline.rst:309
msgid "See also :envvar:`PYTHONUNBUFFERED`."
msgstr ""

#: ../../using/cmdline.rst:311
msgid "The text layer of the stdout and stderr streams now is unbuffered."
msgstr ""

#: ../../using/cmdline.rst:317
msgid "Print a message each time a module is initialized, showing the place (filename or built-in module) from which it is loaded.  When given twice (:option:`!-vv`), print a message for each file that is checked for when searching for a module.  Also provides information on module cleanup at exit. See also :envvar:`PYTHONVERBOSE`."
msgstr ""

#: ../../using/cmdline.rst:327
msgid "Warning control.  Python's warning machinery by default prints warning messages to :data:`sys.stderr`.  A typical warning message has the following form::"
msgstr ""

#: ../../using/cmdline.rst:333
msgid "By default, each warning is printed once for each source line where it occurs.  This option controls how often warnings are printed."
msgstr ""

#: ../../using/cmdline.rst:336
msgid "Multiple :option:`-W` options may be given; when a warning matches more than one option, the action for the last matching option is performed.  Invalid :option:`-W` options are ignored (though, a warning message is printed about invalid options when the first warning is issued)."
msgstr ""

#: ../../using/cmdline.rst:341
msgid "Warnings can also be controlled from within a Python program using the :mod:`warnings` module."
msgstr ""

#: ../../using/cmdline.rst:344
msgid "The simplest form of argument is one of the following action strings (or a unique abbreviation):"
msgstr ""

#: ../../using/cmdline.rst:347
msgid "``ignore``"
msgstr ""

#: ../../using/cmdline.rst:348
msgid "Ignore all warnings."
msgstr ""

#: ../../using/cmdline.rst:350
msgid "``default``"
msgstr ""

#: ../../using/cmdline.rst:350
msgid "Explicitly request the default behavior (printing each warning once per source line)."
msgstr ""

#: ../../using/cmdline.rst:354
msgid "``all``"
msgstr ""

#: ../../using/cmdline.rst:353
msgid "Print a warning each time it occurs (this may generate many messages if a warning is triggered repeatedly for the same source line, such as inside a loop)."
msgstr ""

#: ../../using/cmdline.rst:356
msgid "``module``"
msgstr ""

#: ../../using/cmdline.rst:357
msgid "Print each warning only the first time it occurs in each module."
msgstr ""

#: ../../using/cmdline.rst:358
msgid "``once``"
msgstr ""

#: ../../using/cmdline.rst:359
msgid "Print each warning only the first time it occurs in the program."
msgstr ""

#: ../../using/cmdline.rst:361
msgid "``error``"
msgstr ""

#: ../../using/cmdline.rst:361
msgid "Raise an exception instead of printing a warning message."
msgstr ""

#: ../../using/cmdline.rst:363
msgid "The full form of argument is::"
msgstr ""

#: ../../using/cmdline.rst:367
msgid "Here, *action* is as explained above but only applies to messages that match the remaining fields.  Empty fields match all values; trailing empty fields may be omitted.  The *message* field matches the start of the warning message printed; this match is case-insensitive.  The *category* field matches the warning category.  This must be a class name; the match tests whether the actual warning category of the message is a subclass of the specified warning category.  The full class name must be given.  The *module* field matches the (fully-qualified) module name; this match is case-sensitive.  The *line* field matches the line number, where zero matches all line numbers and is thus equivalent to an omitted line number."
msgstr ""

#: ../../using/cmdline.rst:379
msgid ":mod:`warnings` -- the warnings module"
msgstr ""

#: ../../using/cmdline.rst:381
msgid ":pep:`230` -- Warning framework"
msgstr ""

#: ../../using/cmdline.rst:383
msgid ":envvar:`PYTHONWARNINGS`"
msgstr ""

#: ../../using/cmdline.rst:388
msgid "Skip the first line of the source, allowing use of non-Unix forms of ``#!cmd``.  This is intended for a DOS specific hack only."
msgstr ""

#: ../../using/cmdline.rst:391
msgid "The line numbers in error messages will be off by one."
msgstr ""

#: ../../using/cmdline.rst:396
msgid "Reserved for various implementation-specific options.  CPython currently defines the following possible values:"
msgstr ""

#: ../../using/cmdline.rst:399
msgid "``-X faulthandler`` to enable :mod:`faulthandler`;"
msgstr ""

#: ../../using/cmdline.rst:400
msgid "``-X showrefcount`` to output the total reference count and number of used memory blocks when the program finishes or after each statement in the interactive interpreter. This only works on debug builds."
msgstr ""

#: ../../using/cmdline.rst:403
msgid "``-X tracemalloc`` to start tracing Python memory allocations using the :mod:`tracemalloc` module. By default, only the most recent frame is stored in a traceback of a trace. Use ``-X tracemalloc=NFRAME`` to start tracing with a traceback limit of *NFRAME* frames. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../../using/cmdline.rst:408
msgid "``-X showalloccount`` to output the total count of allocated objects for each type when the program finishes. This only works when Python was built with ``COUNT_ALLOCS`` defined."
msgstr ""

#: ../../using/cmdline.rst:411
msgid "``-X importtime`` to show how long each import takes. It shows module name, cumulative time (including nested imports) and self time (excluding nested imports).  Note that its output may be broken in multi-threaded application.  Typical usage is ``python3 -X importtime -c 'import asyncio'``.  See also :envvar:`PYTHONPROFILEIMPORTTIME`."
msgstr ""

#: ../../using/cmdline.rst:416
msgid "``-X dev`` enables the \"developer mode\": enable debug checks at runtime. In short, ``python3 -X dev ...`` behaves as ``PYTHONMALLOC=debug python3 -W default -X faulthandler ...``, except that the :envvar:`PYTHONMALLOC` environment variable is not set in practice. Developer mode:"
msgstr ""

#: ../../using/cmdline.rst:421
msgid "Add ``default`` warnings option. For example, display :exc:`DeprecationWarning` and :exc:`ResourceWarning` warnings."
msgstr ""

#: ../../using/cmdline.rst:423
msgid "Install debug hooks on memory allocators as if :envvar:`PYTHONMALLOC` is set to ``debug``."
msgstr ""

#: ../../using/cmdline.rst:425
msgid "Enable the :mod:`faulthandler` module to dump the Python traceback on a crash."
msgstr ""

#: ../../using/cmdline.rst:428
msgid "It also allows passing arbitrary values and retrieving them through the :data:`sys._xoptions` dictionary."
msgstr ""

#: ../../using/cmdline.rst:431
msgid "The :option:`-X` option was added."
msgstr ""

#: ../../using/cmdline.rst:434
msgid "The ``-X faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:437
msgid "The ``-X showrefcount`` and ``-X tracemalloc`` options."
msgstr ""

#: ../../using/cmdline.rst:440
msgid "The ``-X showalloccount`` option."
msgstr ""

#: ../../using/cmdline.rst:443
msgid "The ``-X importtime``, ``-X dev`` and :envvar:`PYTHONPROFILEIMPORTTIME` options."
msgstr ""

#: ../../using/cmdline.rst:449
msgid "Options you shouldn't use"
msgstr ""

#: ../../using/cmdline.rst:453
msgid "Reserved for use by Jython_."
msgstr ""

#: ../../using/cmdline.rst:461
msgid "Environment variables"
msgstr ""

#: ../../using/cmdline.rst:463
msgid "These environment variables influence Python's behavior, they are processed before the command-line switches other than -E or -I.  It is customary that command-line switches override environmental variables where there is a conflict."
msgstr ""

#: ../../using/cmdline.rst:470
msgid "Change the location of the standard Python libraries.  By default, the libraries are searched in :file:`{prefix}/lib/python{version}` and :file:`{exec_prefix}/lib/python{version}`, where :file:`{prefix}` and :file:`{exec_prefix}` are installation-dependent directories, both defaulting to :file:`/usr/local`."
msgstr ""

#: ../../using/cmdline.rst:476
msgid "When :envvar:`PYTHONHOME` is set to a single directory, its value replaces both :file:`{prefix}` and :file:`{exec_prefix}`.  To specify different values for these, set :envvar:`PYTHONHOME` to :file:`{prefix}:{exec_prefix}`."
msgstr ""

#: ../../using/cmdline.rst:483
msgid "Augment the default search path for module files.  The format is the same as the shell's :envvar:`PATH`: one or more directory pathnames separated by :data:`os.pathsep` (e.g. colons on Unix or semicolons on Windows). Non-existent directories are silently ignored."
msgstr ""

#: ../../using/cmdline.rst:488
msgid "In addition to normal directories, individual :envvar:`PYTHONPATH` entries may refer to zipfiles containing pure Python modules (in either source or compiled form). Extension modules cannot be imported from zipfiles."
msgstr ""

#: ../../using/cmdline.rst:492
msgid "The default search path is installation dependent, but generally begins with :file:`{prefix}/lib/python{version}` (see :envvar:`PYTHONHOME` above).  It is *always* appended to :envvar:`PYTHONPATH`."
msgstr ""

#: ../../using/cmdline.rst:496
msgid "An additional directory will be inserted in the search path in front of :envvar:`PYTHONPATH` as described above under :ref:`using-on-interface-options`. The search path can be manipulated from within a Python program as the variable :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:504
msgid "If this is the name of a readable file, the Python commands in that file are executed before the first prompt is displayed in interactive mode.  The file is executed in the same namespace where interactive commands are executed so that objects defined or imported in it can be used without qualification in the interactive session.  You can also change the prompts :data:`sys.ps1` and :data:`sys.ps2` and the hook :data:`sys.__interactivehook__` in this file."
msgstr ""

#: ../../using/cmdline.rst:514
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-O` option.  If set to an integer, it is equivalent to specifying :option:`-O` multiple times."
msgstr ""

#: ../../using/cmdline.rst:521
msgid "If this is set, it names a callable using dotted-path notation.  The module containing the callable will be imported and then the callable will be run by the default implementation of :func:`sys.breakpointhook` which itself is called by built-in :func:`breakpoint`.  If not set, or set to the empty string, it is equivalent to the value \"pdb.set_trace\".  Setting this to the string \"0\" causes the default implementation of :func:`sys.breakpointhook` to do nothing but return immediately."
msgstr ""

#: ../../using/cmdline.rst:533
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-d` option.  If set to an integer, it is equivalent to specifying :option:`-d` multiple times."
msgstr ""

#: ../../using/cmdline.rst:540
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-i` option."
msgstr ""

#: ../../using/cmdline.rst:543
msgid "This variable can also be modified by Python code using :data:`os.environ` to force inspect mode on program termination."
msgstr ""

#: ../../using/cmdline.rst:549
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-u` option."
msgstr ""

#: ../../using/cmdline.rst:555
msgid "If this is set to a non-empty string it is equivalent to specifying the :option:`-v` option.  If set to an integer, it is equivalent to specifying :option:`-v` multiple times."
msgstr ""

#: ../../using/cmdline.rst:562
msgid "If this is set, Python ignores case in :keyword:`import` statements.  This only works on Windows and OS X."
msgstr ""

#: ../../using/cmdline.rst:568
msgid "If this is set to a non-empty string, Python won't try to write ``.pyc`` files on the import of source modules.  This is equivalent to specifying the :option:`-B` option."
msgstr ""

#: ../../using/cmdline.rst:575
msgid "If this variable is not set or set to ``random``, a random value is used to seed the hashes of str, bytes and datetime objects."
msgstr ""

#: ../../using/cmdline.rst:578
msgid "If :envvar:`PYTHONHASHSEED` is set to an integer value, it is used as a fixed seed for generating the hash() of the types covered by the hash randomization."
msgstr ""

#: ../../using/cmdline.rst:582
msgid "Its purpose is to allow repeatable hashing, such as for selftests for the interpreter itself, or to allow a cluster of python processes to share hash values."
msgstr ""

#: ../../using/cmdline.rst:586
msgid "The integer must be a decimal number in the range [0,4294967295].  Specifying the value 0 will disable hash randomization."
msgstr ""

#: ../../using/cmdline.rst:594
msgid "If this is set before running the interpreter, it overrides the encoding used for stdin/stdout/stderr, in the syntax ``encodingname:errorhandler``.  Both the ``encodingname`` and the ``:errorhandler`` parts are optional and have the same meaning as in :func:`str.encode`."
msgstr ""

#: ../../using/cmdline.rst:599
msgid "For stderr, the ``:errorhandler`` part is ignored; the handler will always be ``'backslashreplace'``."
msgstr ""

#: ../../using/cmdline.rst:602
msgid "The ``encodingname`` part is now optional."
msgstr ""

#: ../../using/cmdline.rst:605
msgid "On Windows, the encoding specified by this variable is ignored for interactive console buffers unless :envvar:`PYTHONLEGACYWINDOWSSTDIO` is also specified. Files and pipes redirected through the standard streams are not affected."
msgstr ""

#: ../../using/cmdline.rst:612
msgid "If this is set, Python won't add the :data:`user site-packages directory <site.USER_SITE>` to :data:`sys.path`."
msgstr ""

#: ../../using/cmdline.rst:622
msgid "Defines the :data:`user base directory <site.USER_BASE>`, which is used to compute the path of the :data:`user site-packages directory <site.USER_SITE>` and :ref:`Distutils installation paths <inst-alt-install-user>` for ``python setup.py install --user``."
msgstr ""

#: ../../using/cmdline.rst:634
msgid "If this environment variable is set, ``sys.argv[0]`` will be set to its value instead of the value got through the C runtime.  Only works on Mac OS X."
msgstr ""

#: ../../using/cmdline.rst:640
msgid "This is equivalent to the :option:`-W` option. If set to a comma separated string, it is equivalent to specifying :option:`-W` multiple times."
msgstr ""

#: ../../using/cmdline.rst:646
msgid "If this environment variable is set to a non-empty string, :func:`faulthandler.enable` is called at startup: install a handler for :const:`SIGSEGV`, :const:`SIGFPE`, :const:`SIGABRT`, :const:`SIGBUS` and :const:`SIGILL` signals to dump the Python traceback.  This is equivalent to :option:`-X` ``faulthandler`` option."
msgstr ""

#: ../../using/cmdline.rst:657
msgid "If this environment variable is set to a non-empty string, start tracing Python memory allocations using the :mod:`tracemalloc` module. The value of the variable is the maximum number of frames stored in a traceback of a trace. For example, ``PYTHONTRACEMALLOC=1`` stores only the most recent frame. See the :func:`tracemalloc.start` for more information."
msgstr ""

#: ../../using/cmdline.rst:668
msgid "If this environment variable is set to a non-empty string, Python will show how long each import takes.  This is exactly equivalent to setting ``-X importtime`` on the command line."
msgstr ""

#: ../../using/cmdline.rst:677
msgid "If this environment variable is set to a non-empty string, enable the :ref:`debug mode <asyncio-debug-mode>` of the :mod:`asyncio` module."
msgstr ""

#: ../../using/cmdline.rst:685
msgid "Set the Python memory allocators and/or install debug hooks."
msgstr ""

#: ../../using/cmdline.rst:687
msgid "Set the family of memory allocators used by Python:"
msgstr ""

#: ../../using/cmdline.rst:689
msgid "``malloc``: use the :c:func:`malloc` function of the C library for all domains (:c:data:`PYMEM_DOMAIN_RAW`, :c:data:`PYMEM_DOMAIN_MEM`, :c:data:`PYMEM_DOMAIN_OBJ`)."
msgstr ""

#: ../../using/cmdline.rst:692
msgid "``pymalloc``: use the :ref:`pymalloc allocator <pymalloc>` for :c:data:`PYMEM_DOMAIN_MEM` and :c:data:`PYMEM_DOMAIN_OBJ` domains and use the :c:func:`malloc` function for the :c:data:`PYMEM_DOMAIN_RAW` domain."
msgstr ""

#: ../../using/cmdline.rst:696
msgid "Install debug hooks:"
msgstr ""

#: ../../using/cmdline.rst:698
msgid "``debug``: install debug hooks on top of the default memory allocator"
msgstr ""

#: ../../using/cmdline.rst:699
msgid "``malloc_debug``: same as ``malloc`` but also install debug hooks"
msgstr ""

#: ../../using/cmdline.rst:700
msgid "``pymalloc_debug``: same as ``pymalloc`` but also install debug hooks"
msgstr ""

#: ../../using/cmdline.rst:702
msgid "When Python is compiled in release mode, the default is ``pymalloc``. When compiled in debug mode, the default is ``pymalloc_debug`` and the debug hooks are used automatically."
msgstr ""

#: ../../using/cmdline.rst:706
msgid "If Python is configured without ``pymalloc`` support, ``pymalloc`` and ``pymalloc_debug`` are not available, the default is ``malloc`` in release mode and ``malloc_debug`` in debug mode."
msgstr ""

#: ../../using/cmdline.rst:710
msgid "See the :c:func:`PyMem_SetupDebugHooks` function for debug hooks on Python memory allocators."
msgstr ""

#: ../../using/cmdline.rst:718
msgid "If set to a non-empty string, Python will print statistics of the :ref:`pymalloc memory allocator <pymalloc>` every time a new pymalloc object arena is created, and on shutdown."
msgstr ""

#: ../../using/cmdline.rst:722
msgid "This variable is ignored if the :envvar:`PYTHONMALLOC` environment variable is used to force the :c:func:`malloc` allocator of the C library, or if Python is configured without ``pymalloc`` support."
msgstr ""

#: ../../using/cmdline.rst:726
msgid "This variable can now also be used on Python compiled in release mode. It now has no effect if set to an empty string."
msgstr ""

#: ../../using/cmdline.rst:733
msgid "If set to a non-empty string, the default filesystem encoding and errors mode will revert to their pre-3.6 values of 'mbcs' and 'replace', respectively. Otherwise, the new defaults 'utf-8' and 'surrogatepass' are used."
msgstr ""

#: ../../using/cmdline.rst:737
msgid "This may also be enabled at runtime with :func:`sys._enablelegacywindowsfsencoding()`."
msgstr ""

#: ../../using/cmdline.rst:740
#: ../../using/cmdline.rst:754
msgid "Availability: Windows"
msgstr ""

#: ../../using/cmdline.rst:742
msgid "See :pep:`529` for more details."
msgstr ""

#: ../../using/cmdline.rst:747
msgid "If set to a non-empty string, does not use the new console reader and writer. This means that Unicode characters will be encoded according to the active console code page, rather than using utf-8."
msgstr ""

#: ../../using/cmdline.rst:751
msgid "This variable is ignored if the standard streams are redirected (to files or pipes) rather than referring to console buffers."
msgstr ""

#: ../../using/cmdline.rst:761
msgid "If set to the value ``0``, causes the main Python command line application to skip coercing the legacy ASCII-based C locale to a more capable UTF-8 based alternative. Note that this setting is checked even when the :option:`-E` or :option:`-I` options are used, as it is handled prior to the processing of command line options."
msgstr ""

#: ../../using/cmdline.rst:767
msgid "If this variable is *not* set, or is set to a value other than ``0``, and the current locale reported for the ``LC_CTYPE`` category is the default ``C`` locale, then the Python CLI will attempt to configure the following locales for the ``LC_CTYPE`` category in the order listed before loading the interpreter runtime:"
msgstr ""

#: ../../using/cmdline.rst:773
msgid "``C.UTF-8``"
msgstr ""

#: ../../using/cmdline.rst:774
msgid "``C.utf8``"
msgstr ""

#: ../../using/cmdline.rst:775
msgid "``UTF-8``"
msgstr ""

#: ../../using/cmdline.rst:777
msgid "If setting one of these locale categories succeeds, then the ``LC_CTYPE`` environment variable will also be set accordingly in the current process environment before the Python runtime is initialized. This ensures the updated setting is seen in subprocesses, as well as in operations that query the environment rather than the current C locale (such as Python's own :func:`locale.getdefaultlocale`)."
msgstr ""

#: ../../using/cmdline.rst:784
msgid "Configuring one of these locales (either explicitly or via the above implicit locale coercion) will automatically set the error handler for :data:`sys.stdin` and :data:`sys.stdout` to ``surrogateescape``. This behavior can be overridden using :envvar:`PYTHONIOENCODING` as usual."
msgstr ""

#: ../../using/cmdline.rst:789
msgid "For debugging purposes, setting ``PYTHONCOERCECLOCALE=warn`` will cause Python to emit warning messages on ``stderr`` if either the locale coercion activates, or else if a locale that *would* have triggered coercion is still active when the Python runtime is initialized."
msgstr ""

#: ../../using/cmdline.rst:794
msgid "Availability: \\*nix"
msgstr ""

#: ../../using/cmdline.rst:796
msgid "See :pep:`538` for more details."
msgstr ""

#: ../../using/cmdline.rst:800
msgid "Debug-mode variables"
msgstr ""

#: ../../using/cmdline.rst:802
msgid "Setting these variables only has an effect in a debug build of Python, that is, if Python was configured with the ``--with-pydebug`` build option."
msgstr ""

#: ../../using/cmdline.rst:807
msgid "If set, Python will print threading debug info."
msgstr ""

#: ../../using/cmdline.rst:812
msgid "If set, Python will dump objects and reference counts still alive after shutting down the interpreter."
msgstr ""

